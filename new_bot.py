import math
import openai
import re
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application, MessageHandler, filters, CommandHandler, ContextTypes, CallbackQueryHandler
)
import asyncio
import datetime
import pytz
from datetime import datetime, timedelta
from fpdf import FPDF
import io
from dotenv import load_dotenv
import os
from yookassa import Configuration, Payment
import uuid
from PyPDF2 import PdfWriter

load_dotenv()

Configuration.account_id = os.getenv("account_id")
Configuration.secret_key = os.getenv("secret_key")
openai_api_key = os.getenv("OPENAI_API_KEY")
telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")

test = datetime.now() + timedelta(days=-1)
ADMINS = [5706003073, 2125819462]
user_subscriptions = [{'user_id': 2125819462, "subscription_name": 'test', 'price': 0, "end_date": test}]
user_subscriptions = []
users = []
count_words_user = []

# –ø–µ—Ä–µ–º–µ–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
subscription_chat_with_ai_is_true = True
subscription_search_book_is_true = True
count_limit_chat_with_ai = 10
count_limit_book_in_subscribe_day = 10
limit_page_book = 20
count_limit_book_day = 1
wait_hour = 1

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
subscriptions = []
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API-–∫–ª—é—á OpenAI
openai.api_key = openai_api_key

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['chat_context'] = []
    context.user_data['current_mode'] = None
    context.user_data['book_title'] = None
    context.user_data['exact_title'] = None
    context.user_data['chapters'] = None
    context.user_data['awaiting_pages'] = False

    user_id = update.message.from_user.id
    username = update.message.from_user.username

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not any(user['user_id'] == user_id for user in users):
        users.append({'user_id': user_id, 'username': username, 'daily_book_count': 0, 'last_book_date': None, 'is_process_book': False})

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    await handle_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['chat_context'] = []
    context.user_data['current_mode'] = None
    context.user_data['book_title'] = None
    context.user_data['exact_title'] = None
    context.user_data['awaiting_pages'] = False
    query = update.callback_query if update.callback_query else None

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥", callback_data="search_books"),
         InlineKeyboardButton("ü§ñ –ß–∞—Ç —Å –ò–ò", callback_data="chat_with_ai")],
        [InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions_menu"),
         InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="game")],
        [InlineKeyboardButton("üìö –ú–æ—è –±–∏–±–ª–µ–æ—Ç–µ–∫–∞", callback_data="my_library")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    user_id = query.from_user.id if query else update.message.from_user.id
    for user in users:
        if user['user_id'] == user_id: 
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            greeting_message = f"üåü –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user['username']}! üëã\n\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! üòä\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:üëá"

    if user_id in ADMINS:
        keyboard.append([InlineKeyboardButton("üîí –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –∫–Ω–æ–ø–∫–∏ (callback), —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if query:
        await query.edit_message_text(greeting_message , reply_markup=reply_markup)
    else:
        # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(greeting_message , reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
async def check_payment_status(payment_id, user_id, subscription_name, subscription_price, query):
    while True:
        updated_payment = Payment.find_one(payment_id)
        if updated_payment.status == "succeeded":
            # –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            end_date = datetime.now() + timedelta(days=30)

            user_subscriptions.append({
                "user_id": user_id,
                "subscription_name": subscription_name,
                "price": subscription_price,
                "end_date": end_date
            })

            await query.edit_message_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ '{subscription_name}' —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%Y')}.",
                reply_markup=InlineKeyboardMarkup([ 
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
                ])
            )
            break
        elif updated_payment.status == "canceled":
            # –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
            await query.edit_message_text(
                f"‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ '{subscription_name}' –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([ 
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
                ])
            )
            break
        else:
            # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(10)

async def generate_options_menu(options, context):
    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    option_texts = {
        "russian": ["–ö–ª—é—á.–∏–¥–µ–∏,–∞–Ω–∞–ª–∏–∑", "–¶–∏—Ç–∞—Ç—ã –∏–∑ –∫–Ω–∏–≥–∏", "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –∞–≤—Ç–æ—Ä–∞", "–ö—Ä–∏—Ç–∏–∫–∞ –∫–Ω–∏–≥–∏"],
        "english": ["Key Ideas, Analysis", "Quotes in the book", "Author's Biography", "Book Critique"]
    }

    action_texts = {
        "russian": {
            "next": "–î–∞–ª–µ–µ",
            "skip": "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            "select_all": "‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
            "remove_all": "‚ùå –£–±—Ä–∞—Ç—å –≤—Å–µ"
        },
        "english": {
            "next": "Next",
            "skip": "‚è© Skip",
            "select_all": "‚úÖ Select All",
            "remove_all": "‚ùå Remove All"
        }
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    selected_language = context.user_data.get('book_language', 'russian')
    option_labels = option_texts[selected_language]
    action_labels = action_texts[selected_language]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å, –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ", –∏–Ω–∞—á–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    action_button_text = action_labels["next"] if any(options.values()) else action_labels["skip"]
    remove_all_button = action_labels["remove_all"] if all(options.values()) else None
    select_all_button = action_labels["select_all"] if not all(options.values()) else None

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π
    buttons = [
        [
            InlineKeyboardButton(
                f"{option_labels[0]} {'‚úÖ' if options['option_1'] else '‚ùå'}",
                callback_data="toggle_option_option_1"
            ),
            InlineKeyboardButton(
                f"{option_labels[1]} {'‚úÖ' if options['option_2'] else '‚ùå'}",
                callback_data="toggle_option_option_2"
            ),
        ],
        [
            InlineKeyboardButton(
                f"{option_labels[2]} {'‚úÖ' if options['option_3'] else '‚ùå'}",
                callback_data="toggle_option_option_3"
            ),
            InlineKeyboardButton(
                f"{option_labels[3]} {'‚úÖ' if options['option_4'] else '‚ùå'}",
                callback_data="toggle_option_option_4"
            ),
        ],
        [
            InlineKeyboardButton(action_button_text, callback_data="skip_options"),
            InlineKeyboardButton(remove_all_button if remove_all_button else select_all_button, callback_data="select_all_options" if not remove_all_button else "remove_all_options")
        ]
    ]

    return InlineKeyboardMarkup(buttons)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—é
async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "my_library":
        user_id = query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
        if user.get('library'):
            books_list = "\n".join(
                [f"{idx + 1}. {book['title']}" for idx, book in enumerate(user['library'])]
            )
            library_text = f"üìö –í–∞—à–∏ –∫–Ω–∏–≥–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–π"
            keyboard = [
                [InlineKeyboardButton(book['title'], callback_data=f"book_options_{idx}")]
                for idx, book in enumerate(user['library'])
            ]
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")])
        else:
            library_text = "üìö –í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫!"
            keyboard = [
                [InlineKeyboardButton("üìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥", callback_data="search_books")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(library_text, reply_markup=reply_markup)

    elif query.data.startswith("book_options_"):
        user_id = query.from_user.id
        book_index = int(query.data.split("_")[2])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–Ω–∏–≥–∏
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user or 'library' not in user or book_index >= len(user['library']):
            await query.edit_message_text("‚ö†Ô∏è –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞")
            return

        selected_book = user['library'][book_index]
        book_title = selected_book['title']

        # –¢–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
        options_text = f"üìò –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–∏–≥—É: {book_title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        keyboard = [
            [InlineKeyboardButton("üì§ –ü—Ä–∏—Å–ª–∞—Ç—å –∫–Ω–∏–≥—É –≤ —á–∞—Ç", callback_data=f"send_book_{book_index}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"delete_book_{book_index}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_library")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(options_text, reply_markup=reply_markup)

    elif query.data.startswith("delete_book_"):
        user_id = query.from_user.id
        book_index = int(query.data.split("_")[2])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–Ω–∏–≥–∏
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user or 'library' not in user or book_index >= len(user['library']):
            await query.edit_message_text("‚ö†Ô∏è –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")
            return

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–Ω–∏–≥–∏
        selected_book = user['library'][book_index]
        file_path = selected_book['file_path']
        book_title = selected_book['title']

        try:
            os.remove(file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ media
        except FileNotFoundError:
            pass  # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        # –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥—É –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user['library'].pop(book_index)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
        if user['library']:
            books_list = "\n".join(
                [f"{idx + 1}. {book['title']}" for idx, book in enumerate(user['library'])]
            )
            library_text = f"üìö –í–∞—à–∏ –∫–Ω–∏–≥–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–π"
            keyboard = [
                [InlineKeyboardButton(book['title'], callback_data=f"book_options_{idx}")]
                for idx, book in enumerate(user['library'])
            ]
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")])
        else:
            library_text = "üìö –í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫!"
            keyboard = [
                [InlineKeyboardButton("üìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥", callback_data="search_books")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üóëÔ∏è –ö–Ω–∏–≥–∞ '{book_title}' –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
            reply_markup=reply_markup
        )

    elif query.data.startswith("send_book_"):
        user_id = query.from_user.id
        book_index = int(query.data.split("_")[2])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–Ω–∏–≥–∏
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user or 'library' not in user or book_index >= len(user['library']):
            await query.edit_message_text("‚ö†Ô∏è –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞")
            return

        selected_book = user['library'][book_index]
        file_path = selected_book['file_path']
        book_title = selected_book['title']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await query.message.reply_document(document=open(file_path, 'rb'), filename=f"{book_title}.pdf")
        except FileNotFoundError:
            await query.edit_message_text("‚ö†Ô∏è –§–∞–π–ª –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await query.edit_message_text(
            f"üì§ –ö–Ω–∏–≥–∞ {book_title} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç!\n\n",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_library")]])
        )

    elif query.data == "menu":
        user_id = query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        await handle_menu(update, context)
    
    elif query.data == "subscriptions_menu":
        user_id = query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        global user_subscriptions
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_subscription = next(
            (sub for sub in user_subscriptions if sub["user_id"] == user_id and sub["end_date"] >= datetime.now()),
            None
        )
        expired_subscription = next(
            (sub for sub in user_subscriptions if sub["user_id"] == user_id and sub["end_date"] < datetime.now()),
            None
        )
        if active_subscription:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            subscription_status = "üü¢ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞"
            subscription_text = f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ '{active_subscription['subscription_name']}' –∞–∫—Ç–∏–≤–Ω–∞."
        elif expired_subscription:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            subscription_status = "üî¥ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
            subscription_text = f"‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ '{expired_subscription['subscription_name']}' –∏—Å—Ç–µ–∫–ª–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é"
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –±—ã–ª–æ
            subscription_status = "‚ö™ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            subscription_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.\nüí∏ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º"

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        subscriptions_keyboard = [
            [InlineKeyboardButton(subscription_status, callback_data="active_subscription")],
            [InlineKeyboardButton("üìö –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(subscriptions_keyboard)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º
        await query.edit_message_text(
            f"{subscription_text}\n\n‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=reply_markup
        )

    elif query.data == "active_subscription":
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        active_subscription = next(
            (sub for sub in user_subscriptions if sub["user_id"] == user_id), None
        )
        
        if active_subscription:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if active_subscription["end_date"] >= datetime.now():
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
                end_date_str = active_subscription["end_date"].strftime('%d.%m.%Y')
                message = (
                    f"üü¢ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {active_subscription['subscription_name']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {active_subscription['price']} —Ä—É–±.\n"
                    f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date_str}"
                )
            else:
                # –ï—Å–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫
                message = (
                    f"‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ '{active_subscription['subscription_name']}' –∏—Å—Ç–µ–∫–ª–∞\n"
                    f"üí∞ –¶–µ–Ω–∞ –±—ã–ª–∞: {active_subscription['price']} —Ä—É–±.\n"
                    f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫: {active_subscription['end_date'].strftime('%d.%m.%Y')}"
                )
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
            message = "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_button = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscriptions_menu")]]
        reply_markup = InlineKeyboardMarkup(back_button)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(message, reply_markup=reply_markup)

    elif query.data == "subscriptions":
        user_id = query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        if not subscriptions:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç
            no_subscriptions_keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscriptions_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(no_subscriptions_keyboard)
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç", reply_markup=reply_markup)
        else:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            subscriptions_keyboard = [
                [InlineKeyboardButton(sub["name"], callback_data=f"view_{sub['name']}")] for sub in subscriptions
            ]
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–±—Ä–∞—Ç–Ω–æ"
            subscriptions_keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscriptions_menu")])
            reply_markup = InlineKeyboardMarkup(subscriptions_keyboard)
            await query.edit_message_text("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=reply_markup)
    
    elif query.data.startswith("view_"):
        user_id = query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
        subscription_name = query.data[5:]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        
        # –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
        selected_subscription = next(
            (sub for sub in subscriptions if sub["name"] == subscription_name), None
        )
        
        if selected_subscription:
            price = selected_subscription["price"]
            duration_days = 30  # –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö
            end_date = datetime.now() + timedelta(days=duration_days)
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = (
                f"üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ü–æ–¥–ø–∏—Å–∫–∏\n\n"
                f"‚ú® –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_name}\n"
                f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {duration_days} –¥–Ω–µ–π\n"
                f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                f"üìÖ –ó–∞–∫–æ–Ω—á–∏—Ç—Å—è: {end_date.strftime('%d.%m.%Y')}\n\n"
                "üîë –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!"
            )
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            keyboard = [
                [InlineKeyboardButton("üí∏ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"buy_{subscription_name}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="subscriptions")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(message, parse_mode="Markdown", reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    # –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    elif query.data.startswith("buy_"):
        user_id = query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_name = query.data.replace("buy_", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        active_subscription = next(
            (sub for sub in user_subscriptions if sub["user_id"] == user_id and sub["end_date"] >= datetime.now()),
            None
        )
        
        if active_subscription:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
            await query.edit_message_text(
                f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {active_subscription['subscription_name']}.\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É—é—â–∞—è –¥–æ {active_subscription['end_date'].strftime('%d.%m.%Y')}.\n\n"
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–∫–∞ –Ω–µ –∏—Å—Ç–µ—á—ë—Ç —Ç–µ–∫—É—â–∞—è.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
                ])
            )
            return
        else:
            # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞
            expired_subscription = next(
                (sub for sub in user_subscriptions if sub["user_id"] == user_id and sub["end_date"] < datetime.now()),
                None
            )
            if expired_subscription:
                # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
                user_subscriptions = [sub for sub in user_subscriptions if sub != expired_subscription]
                #print("–£–¥–∞–ª–µ–Ω–æ:", expired_subscription)
                #print("–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–¥–ø–∏—Å–∫–∏:", user_subscriptions)

        # –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
        selected_subscription = next(
            (sub for sub in subscriptions if sub["name"] == subscription_name), None
        )
        
        if selected_subscription:
            subscription_price = selected_subscription["price"]

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É
            payment = Payment.create({
                "amount": {
                    "value": f"{subscription_price:.2f}",
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://t.me/FastPage_Bot"  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–æ–∑–≤—Ä–∞—Ç–∞
                },
                "capture": True,
                "description": f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_name}"
            }, uuid.uuid4())

            # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
            payment_url = payment.confirmation.confirmation_url

            await query.edit_message_text(
                f"üí° **–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ '{subscription_name}' –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**\n\n"
                f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üí≥ **–û–ø–ª–∞—Ç–∏—Ç—å** –Ω–∏–∂–µ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –æ–ø–ª–∞—Ç—ã.\n"
                f"3Ô∏è‚É£ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞!\n\n"
                f"‚è≥ *–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...*\n"
                f"–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, **üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é**.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]  # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                ])
            )
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
            payment_id = payment.id
            asyncio.create_task(check_payment_status(payment_id, user_id, subscription_name, subscription_price, query))
    
        else:
            await query.edit_message_text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    elif query.data == "admin_panel":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        user_id = update.callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            return
        admin_keyboard = [
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="users_admin")],
            [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="manage_subscriptions")],
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications")],
            [InlineKeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º—ã", callback_data="modes_admin")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(admin_keyboard)
        await query.edit_message_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=reply_markup)

    elif query.data == "users_admin":
        user_id = update.callback_query.from_user.id
        context.user_data['current_mode'] = None
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        if user_id not in ADMINS:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            return

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        admin_user_management_keyboard = [
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="search_user")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(admin_user_management_keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", reply_markup=reply_markup)

    elif query.data == "search_user":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            return
        admin_subscriptions_keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="users_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(admin_subscriptions_keyboard)
        context.user_data['current_mode'] = 'search_user'
        await query.edit_message_text(
            "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ **user_id** –∏–ª–∏ **username** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n"
            "–ü—Ä–∏–º–µ—Ä: \n"
            "- –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ **user_id**: –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —á–∏—Å–ª–æ.\n"
            "- –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ **username**: –≤–≤–µ–¥–∏—Ç–µ –∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "üîé –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–∞—Å.",
            reply_markup=reply_markup
        )

    elif query.data == "notifications":
        user_id = update.callback_query.from_user.id
        context.user_data['current_mode'] = None
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            return
        admin_subscriptions_keyboard = [
            [InlineKeyboardButton("üì¢ –î–ª—è –≤—Å–µ—Ö", callback_data="notify_all")],
            [InlineKeyboardButton("üì¢ –î–ª—è —Ç–µ—Ö –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω", callback_data="notify_subscribed")],
            [InlineKeyboardButton("üì¢ –¥–ª—è –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω", callback_data="notify_unsubscribed")],
            [InlineKeyboardButton("üì¢ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="notify_single_user")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(admin_subscriptions_keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", reply_markup=reply_markup)

    elif query.data == "notify_single_user":
        user_id = update.callback_query.from_user.id

        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        if user_id not in ADMINS:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            return

        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['current_mode'] = 'notify_single_user'
        
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await query.edit_message_text("üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notifications")]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text("üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", reply_markup=reply_markup)
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ async —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        return

    elif query.data.startswith("notify_"):
        user_id = update.callback_query.from_user.id
        
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if user_id not in ADMINS:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏–∑ callback_data
        target_group = query.data.split("_")[1]  # "all", "subscribed" –∏–ª–∏ "unsubscribed"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if target_group not in ["all", "subscribed", "unsubscribed"]:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ user_data
        context.user_data['target_group'] = target_group
        context.user_data['current_mode'] = 'process_notification'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        instructions = (
            "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "`–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏|–°—Å—ã–ª–∫–∞ –∏–ª–∏ /–∫–æ–º–∞–Ω–¥–∞`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "üéâ –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! üéâ\n"
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ|https://example.com\n"
            "–ú–µ–Ω—é|/menu\n\n"
            "üåü –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –∫—Ä–∞—Å–∏–≤—ã–º –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏! üåàüòä\n"
            "–û–Ω–∏ –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ —è—Ä–∫–∏–º –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω—É–∂–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã.\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, —É–∫–∞–∂–∏—Ç–µ –∏—Ö –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º –≤—ã—à–µ.\n\n"
            "üìå –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –º–æ–≥—É—Ç –≤–µ—Å—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.\n\n"
            "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥, –≤—ã–±—Ä–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notifications")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(instructions, reply_markup=reply_markup, parse_mode="Markdown")

    elif query.data == "modes_admin":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        admin_subscriptions_keyboard = [
            [InlineKeyboardButton("üìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥", callback_data="search_books_admin")],
            [InlineKeyboardButton("ü§ñ –ß–∞—Ç —Å –ò–ò", callback_data="chat_with_ai_admin")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(admin_subscriptions_keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    elif query.data == "search_books_admin":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        admin_subscriptions_keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å. –∫–æ–ª-–≤–æ —Å—Ç—Ä–Ω. (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏)", callback_data="limit_page_book")],
            [InlineKeyboardButton("‚úèÔ∏è –õ–∏–º–∏—Ç –∫–Ω–∏–≥ –≤ –¥–µ–Ω—å (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏):", callback_data="Limit_books_day")],
            [InlineKeyboardButton("‚úèÔ∏è –õ–∏–º–∏—Ç –∫–Ω–∏–≥ –≤ –¥–µ–Ω—å (—Å –ø–æ–¥–ø–∏—Å–∫–æ–π)", callback_data="Limit_books_day_subscribe")],
            [InlineKeyboardButton("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: –í–∫–ª/–í—ã–∫–ª", callback_data="off_on_subscription_search_books")],
            [InlineKeyboardButton("üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ", callback_data="info_search_books")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="modes_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(admin_subscriptions_keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    elif query.data == "off_on_subscription_search_books":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return

        # –†–∞–±–æ—Ç–∞ —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        global subscription_search_book_is_true
        if subscription_search_book_is_true:
            subscription_search_book_is_true = False
            status_text = "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞."
        else:
            subscription_search_book_is_true = True
            status_text = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω–∞."

        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        menu_buttons = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_books_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(menu_buttons)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –º–µ–Ω—é
        await query.edit_message_text(
            text=status_text,
            reply_markup=reply_markup
        )
    
    elif query.data == "limit_page_book":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        context.user_data['current_mode'] = 'limit_page_book'
        await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å. –∫–æ–ª-–≤–æ —Å—Ç—Ä–Ω. (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏)")

    elif query.data == "Limit_books_day_subscribe":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        context.user_data['current_mode'] = 'Limit_books_day_subscribe'
        await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç –∫–Ω–∏–≥ –≤ –¥–µ–Ω—å")
    
    elif query.data == "Limit_books_day":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        context.user_data['current_mode'] = 'Limit_books_day'
        await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç –∫–Ω–∏–≥ –≤ –¥–µ–Ω—å")
    
    elif query.data == "info_search_books":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        subscription_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if subscription_search_book_is_true else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"
        info_text = (
            "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ \"–ü–æ–∏—Å–∫ –∫–Ω–∏–≥\"</b>\n\n"
            f"üí¨ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_status}\n"
            f"üí¨ <b>–õ–∏–º–∏—Ç –∫–Ω–∏–≥ –≤ –¥–µ–Ω—å (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏):</b> {count_limit_book_day}\n"
            f"üí¨ <b>–õ–∏–º–∏—Ç –∫–Ω–∏–≥ –≤ –¥–µ–Ω—å (—Å –ø–æ–¥–ø–∏—Å–∫–æ–π):</b> {count_limit_book_in_subscribe_day}\n"
            f"üí¨ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å. –∫–æ–ª-–≤–æ —Å—Ç—Ä–Ω. (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏):</b> {limit_page_book}\n"
        )

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_button = InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_books_admin")
        reply_markup = InlineKeyboardMarkup([[back_button]])

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_text(
            text=info_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )

    elif query.data == "chat_with_ai_admin":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        admin_subscriptions_keyboard = [
            [InlineKeyboardButton("‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —á–∞—Å–æ–≤", callback_data="edit_hour_in_chat_with_ai")],
            [InlineKeyboardButton("‚úèÔ∏è –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏)", callback_data="edit_count_in_chat_with_ai")],
            [InlineKeyboardButton("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: –í–∫–ª/–í—ã–∫–ª", callback_data="off_on_subscription_verification_chat_with")],
            [InlineKeyboardButton("üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ", callback_data="Info_chat_with_ai")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="modes_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(admin_subscriptions_keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    elif query.data == "off_on_subscription_verification_chat_with":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return

        # –†–∞–±–æ—Ç–∞ —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        global subscription_chat_with_ai_is_true
        if subscription_chat_with_ai_is_true:
            subscription_chat_with_ai_is_true = False
            status_text = "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞."
        else:
            subscription_chat_with_ai_is_true = True
            status_text = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω–∞."

        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        menu_buttons = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="chat_with_ai_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(menu_buttons)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –º–µ–Ω—é
        await query.edit_message_text(
            text=status_text,
            reply_markup=reply_markup
        )
    
    elif query.data == "Info_chat_with_ai":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        subscription_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if subscription_chat_with_ai_is_true else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"
        info_text = (
            "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ \"–ß–∞—Ç —Å –ò–ò\"</b>\n\n"
            f"üìú <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_status}\n"
            f"üí¨ <b>–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {count_limit_chat_with_ai}\n"
            f"‚è≥ <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞:</b> {wait_hour} —á–∞—Å–æ–≤\n"
        )

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_button = InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="chat_with_ai_admin")
        reply_markup = InlineKeyboardMarkup([[back_button]])

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_text(
            text=info_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )

    elif query.data == "edit_count_in_chat_with_ai":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        context.user_data['current_mode'] = 'edit_count_in_chat_with_ai'
        await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏)")

    elif query.data == "edit_hour_in_chat_with_ai":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        context.user_data['current_mode'] = 'edit_hour_in_chat_with_ai'
        await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ª–∏–º–∏—Ç–∞")

    elif query.data == "manage_subscriptions":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        admin_subscriptions_keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_subscription")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="remove_subscription")],
            [InlineKeyboardButton("üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="gift_subscription")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(admin_subscriptions_keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    elif query.data == "gift_subscription":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
        if not subscriptions:
            keyboard = [
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_subscriptions")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞. üòû", reply_markup=reply_markup)
            return
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
        gift_subscription_keyboard = [
            [InlineKeyboardButton(sub['name'], callback_data=f"gift_{sub['name']}") for sub in subscriptions]
        ]
        gift_subscription_keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_subscriptions")])
        reply_markup = InlineKeyboardMarkup(gift_subscription_keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å:", reply_markup=reply_markup)
    
    elif query.data.startswith("gift_"):
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        # –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        selected_subscription = query.data.replace("gift_", "")
        context.user_data['current_mode'] = 'gift_subscription'
        context.user_data['selected_subscription'] = selected_subscription  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:")

    elif query.data == "add_subscription":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        context.user_data['current_mode'] = 'add_subscription'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ üìõ‚ú®.\n–£–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å–º–∞–π–ª–∏–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É! üåü\n–ü—Ä–∏–º–µ—Ä: üìö –ü–æ–¥–ø–∏—Å–∫–∞_–∫–Ω–∏–≥–∏")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
    elif query.data == "remove_subscription":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

        if user_id not in ADMINS:
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–¥–∞–ª
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if not subscriptions:
            keyboard = [
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_subscriptions")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=reply_markup)
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
        keyboard = [
            [InlineKeyboardButton(sub['name'], callback_data=f"delete_{sub['name']}") for sub in subscriptions]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'name' –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        ]
        keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_subscriptions")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    elif query.data.startswith("delete_"):
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        subscription_name = query.data.replace("delete_", "")
        
        # –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –≤ —Å–ø–∏—Å–∫–µ
        subscription = next((sub for sub in subscriptions if sub['name'] == subscription_name), None)
        
        if subscription:
            subscriptions.remove(subscription)  # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            back_button = InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_subscriptions")

            if subscriptions:
                # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–¥–ø–∏—Å–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                keyboard = [
                    [InlineKeyboardButton(sub['name'], callback_data=f"delete_{sub['name']}") for sub in subscriptions]
                ]
                keyboard.append([back_button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
                await query.edit_message_text(
                    f"–ü–æ–¥–ø–∏—Å–∫–∞ '{subscription_name}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    reply_markup=reply_markup,
                )
            else:
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç
                await query.edit_message_text(
                    f"–ü–æ–¥–ø–∏—Å–∫–∞ '{subscription_name}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.\n–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([[back_button]])  # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                )
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            await query.edit_message_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ '{subscription_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä—ã"
    elif query.data == "game":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:####################################################################################################################################
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        game_text = (
            "üéÆ –†–∞–∑–¥–µ–ª '–ò–≥—Ä—ã' —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω! üîú\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–º–∏ —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∏–≥—Ä–∞—Ö. üöÄ"
        )
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        game_keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(game_keyboard)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
        await query.edit_message_text(game_text, reply_markup=reply_markup)

    elif query.data == "search_books":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_subscription = next(
            (sub for sub in user_subscriptions if sub["user_id"] == user_id), None
        )

        if subscription_search_book_is_true:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
            if not active_subscription or active_subscription['end_date'] <= datetime.now():
                await query.edit_message_text(
                    "üîí –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ—ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã:\n\n"
                    f"1Ô∏è‚É£ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: –æ—Ç 5 –¥–æ {limit_page_book}.\n"
                    f"2Ô∏è‚É£ –ö–æ–ª-–≤–æ –∫–Ω–∏–≥ –≤ –¥–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ {count_limit_book_day}\n"
                    "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–Ω–∏–≥–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="language_russian")],
                        [InlineKeyboardButton("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="language_english")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
                    ])
                )
                return

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="language_russian")],
            [InlineKeyboardButton("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="language_english")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–Ω–∏–≥–∏:",
            reply_markup=reply_markup
        )

    elif query.data in ["language_russian", "language_english"]:
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        if query.data == "language_russian":
            context.user_data['book_language'] = "russian"
            prompt_text = "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫ - üá∑üá∫ –†—É—Å—Å–∫–∏–π.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:"
        else:
            context.user_data['book_language'] = "english"
            prompt_text = "‚úÖ You have selected the language - üá¨üáß English.\nNow select the options:"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ü–∏–π
        context.user_data['options'] = {
            "option_1": False,
            "option_2": False,
            "option_3": False,
            "option_4": False,
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø—Ü–∏–π
        await query.edit_message_text(
            prompt_text,
            reply_markup=await generate_options_menu(context.user_data['options'], context)
        )

    elif query.data == "toggle_option_option_1":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ü–∏–∏ 1
        current_state = context.user_data['options']['option_1']
        context.user_data['options']['option_1'] = not current_state

        if context.user_data.get('book_language') == 'russian':
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                "Now select options:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )

    elif query.data == "toggle_option_option_2":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ü–∏–∏ 2
        current_state = context.user_data['options']['option_2']
        context.user_data['options']['option_2'] = not current_state

        if context.user_data.get('book_language') == 'russian':
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                "Now select options:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )

    elif query.data == "toggle_option_option_3":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ü–∏–∏ 3
        current_state = context.user_data['options']['option_3']
        context.user_data['options']['option_3'] = not current_state

        if context.user_data.get('book_language') == 'russian':
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                "Now select options:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )
    
    elif query.data == "toggle_option_option_4":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ü–∏–∏ 4
        current_state = context.user_data['options']['option_4']
        context.user_data['options']['option_4'] = not current_state

        if context.user_data.get('book_language') == 'russian':
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.edit_message_text(
                "Now select options:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )

    elif query.data == "skip_options":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ï—Å–ª–∏ –≤—Å–µ –æ–ø—Ü–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if context.user_data.get('book_language') == 'russian':
            if all(not option for option in context.user_data['options'].values()):
                context.user_data['current_mode'] = "search_books"
                await query.edit_message_text("‚úèÔ∏è –ö–∞–∫—É—é –∫–Ω–∏–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å?\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            else:
                # –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ –æ–ø—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                context.user_data['current_mode'] = "search_books"
                await query.edit_message_text("‚úèÔ∏è –ö–∞–∫—É—é –∫–Ω–∏–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å?\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        else:
            if all(not option for option in context.user_data['options'].values()):
                context.user_data['current_mode'] = "search_books"
                await query.edit_message_text("‚úèÔ∏è Which book do you want to review?\nWrite the name")
            else:
                # –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ –æ–ø—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                context.user_data['current_mode'] = "search_books"
                await query.edit_message_text("‚úèÔ∏è Which book do you want to review?\nWrite the name")

    elif query.data == "select_all_options":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        context.user_data['options'] = {key: True for key in context.user_data['options']}
        if context.user_data.get('book_language') == 'russian':
            await query.edit_message_text(
                "–í—Å–µ –æ–ø—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å –≤—Å–µ:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )
        else:
            await query.edit_message_text(
                "All options are selected. You can remove everything:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )

    elif query.data == "remove_all_options":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        context.user_data['options'] = {key: False for key in context.user_data['options']}
        if context.user_data.get('book_language') == 'russian':
            await query.edit_message_text(
                "–í—Å–µ –æ–ø—Ü–∏–∏ —É–±—Ä–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )
        else:
            await query.edit_message_text(
                "All options have been removed. Select again:",
                reply_markup=await generate_options_menu(context.user_data['options'], context)
            )

    elif query.data == "chat_with_ai":
        user_id = update.callback_query.from_user.id
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = next((u for u in users if u['user_id'] == user_id), None)

        if not user:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_subscription = next(
            (sub for sub in user_subscriptions if sub["user_id"] == user_id and sub["end_date"] >= datetime.now()),
            None
        )
        user_data = next((user for user in count_words_user if user['user_id'] == user_id), None)

        if not user_data:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ count_words_user, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            user_data = {'count': 0}

        if not active_subscription:
            # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
            sms_limit = user_data.get('count', 0)  # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ])
            message = (
                f"üìâ **–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏**, –∏ –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É —Å –ò–ò –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n"
                f"üì± –í–∞—à —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π: {sms_limit}/{count_limit_chat_with_ai}.\n\n"
                f"üí¨ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Ç, –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç–µ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ª–∏–º–∏—Ç –±—É–¥–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, –¥–æ—Å—Ç—É–ø –∫ –ß–∞—Ç—É —Å –ò–ò –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –∏ –Ω–∞—á–Ω—ë—Ç—Å—è –æ—Ç—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞.\n\n"
                f"üí° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å—Å—è –ª–∏–º–∏—Ç–æ–º, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!\nüí¨ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã! –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º. üòä"
            )
            await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
            context.user_data['current_mode'] = "chat_with_ai"
        else:
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ])

            await update.callback_query.message.reply_text(
                "üí¨ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã! –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å. üòä",
                reply_markup=reply_markup
            )
            context.user_data['current_mode'] = "chat_with_ai"

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
async def add_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.message.from_user.id
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ï—Å–ª–∏ –∏–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ
    if not context.user_data.get('subscription_name'):
        context.user_data['subscription_name'] = text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        if any(sub["name"] == text for sub in subscriptions):
            context.user_data['subscription_name'] = None
            await update.message.reply_text(
                f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å –∏–º–µ–Ω–µ–º '{text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            )
            return
        else:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–µ—Å—è—Ü (–±–æ–ª—å—à–µ 0):")
            context.user_data['action'] = 'set_price'

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Ü–µ–Ω—ã
    elif context.user_data.get('action') == 'set_price':
        try:
            price = int(text)
            if price <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            
            subscription_name = context.user_data.get('subscription_name')

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ —Å–ø–∏—Å–æ–∫
            subscriptions.append({
                "name": subscription_name,
                "price": price
            })

            await update.message.reply_text(
                f"–ü–æ–¥–ø–∏—Å–∫–∞ '{subscription_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —Ü–µ–Ω–æ–π {price} —Ä—É–±."
            )
            await handle_menu(update, context)
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['current_mode'] = None
            context.user_data['subscription_name'] = None
            context.user_data['action'] = None
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ ID –∏ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def gift_subscription(update, context):
    user_id = update.message.from_user.id
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        context.user_data['current_mode'] = None
        context.user_data['selected_subscription'] = None
        return
    entered_id = update.message.text.strip()  # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if context.user_data.get('current_mode') != 'gift_subscription':
        return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        recipient_id = int(entered_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –≤ —Å–ø–∏—Å–∫–µ users
        recipient = next((user for user in users if user['user_id'] == recipient_id), None)
        
        if not recipient:
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {entered_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['recipient_id'] = recipient_id
        context.user_data['current_mode'] = 'set_subscription_days'

    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
async def set_subscription_days(update, context):
    user_id = update.message.from_user.id
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        context.user_data['current_mode'] = None
        context.user_data['recipient_id'] = None
        context.user_data['selected_subscription'] = None
        return
    entered_days = update.message.text.strip()

    if context.user_data.get('current_mode') != 'set_subscription_days':
        return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π ‚Äî —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        days = int(entered_days)

        if days <= 0:
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return

        recipient_id = context.user_data['recipient_id']
        selected_subscription = context.user_data['selected_subscription']

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        end_date = datetime.now() + timedelta(days=days)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ —Å–ø–∏—Å–æ–∫ (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
        user_subscriptions.append({'user_id': recipient_id, 'subscription_name': selected_subscription, 'price': 0, 'end_date': end_date})

        # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–∞ –æ –ø–æ–¥–∞—Ä–∫–µ
        await update.message.reply_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ '{selected_subscription}' –ø–æ–¥–∞—Ä–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {recipient_id}. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date.strftime('%d.%m.%Y')}.")
        await handle_menu(update, context)
        # –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        context.user_data['current_mode'] = None
        context.user_data['recipient_id'] = None
        context.user_data['selected_subscription'] = None

    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ª–∏–º–∏—Ç–∞
async def edit_hour_in_chat_with_ai(update, context):
    user_id = update.message.from_user.id
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    text = update.message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        context.user_data['current_mode'] = None
        context.user_data['selected_subscription'] = None
        return

    if context.user_data.get('current_mode') != 'edit_hour_in_chat_with_ai':
        return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ª–∏–º–∏—Ç–∞

    if not text:
        await update.message.reply_text(f"–ß–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        number = int(text)
        
        if number < 1:
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
            return
        global wait_hour
        wait_hour = number
        await update.message.reply_text(f"–ö–æ–ª-–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ª–∏–º–∏—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {wait_hour}")
        await handle_menu(update, context)
        context.user_data['current_mode'] = None
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏)
async def edit_count_in_chat_with_ai(update, context):
    user_id = update.message.from_user.id
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    text = update.message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        context.user_data['current_mode'] = None
        context.user_data['selected_subscription'] = None
        return

    if context.user_data.get('current_mode') != 'edit_count_in_chat_with_ai':
        return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ª–∏–º–∏—Ç–∞

    if not text:
        await update.message.reply_text(f"–ß–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        number = int(text)
        
        if number < 1:
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
            return

        global count_limit_chat_with_ai
        count_limit_chat_with_ai = number
        await update.message.reply_text(f"–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {count_limit_chat_with_ai}")
        await handle_menu(update, context)
        context.user_data['current_mode'] = None
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–∏–º–∏—Ç–∞ –∫–Ω–∏–≥ –≤ –¥–µ–Ω—å
async def Limit_books_day(update, context):
    user_id = update.message.from_user.id
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    text = update.message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        context.user_data['current_mode'] = None
        context.user_data['selected_subscription'] = None
        return

    if context.user_data.get('current_mode') != 'Limit_books_day':
        return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª-–≤–æ –∫–Ω–∏–≥ –¥–ª—è –ª–∏–º–∏—Ç–∞

    if not text:
        await update.message.reply_text(f"–ß–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        number = int(text)
        
        if number < 1:
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
            return

        global count_limit_book_day
        count_limit_book_day = number
        await update.message.reply_text(f"–õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª-–≤–æ –∫–Ω–∏–≥ –≤ –¥–µ–Ω—å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {count_limit_book_day}")
        await handle_menu(update, context)
        context.user_data['current_mode'] = None
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–∏–º–∏—Ç–∞ –∫–Ω–∏–≥ –≤ –¥–µ–Ω—å
async def Limit_books_day_subscribe(update, context):
    user_id = update.message.from_user.id
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    text = update.message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        context.user_data['current_mode'] = None
        context.user_data['selected_subscription'] = None
        return

    if context.user_data.get('current_mode') != 'Limit_books_day_subscribe':
        return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª-–≤–æ –∫–Ω–∏–≥ –¥–ª—è –ª–∏–º–∏—Ç–∞

    if not text:
        await update.message.reply_text(f"–ß–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        number = int(text)
        
        if number < 1:
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
            return

        global count_limit_book_in_subscribe_day
        count_limit_book_in_subscribe_day = number
        await update.message.reply_text(f"–õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª-–≤–æ –∫–Ω–∏–≥ –≤ –¥–µ–Ω—å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {count_limit_book_in_subscribe_day}")
        await handle_menu(update, context)
        context.user_data['current_mode'] = None
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")

async def send_notification_to_users(update: Update, context: ContextTypes.DEFAULT_TYPE, notification_text, reply_markup, target_group):
    user_id = update.message.from_user.id

    user = next((u for u in users if u['user_id'] == user_id), None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    if target_group == "all":
        target_users = users  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    elif target_group == "subscribed":
        target_users = [u for u in users if any(sub['user_id'] == u['user_id'] and sub['end_date'] > datetime.now() for sub in user_subscriptions)]
    elif target_group == "unsubscribed":
        target_users = [u for u in users if not any(sub['user_id'] == u['user_id'] and sub['end_date'] > datetime.now() for sub in user_subscriptions)]
    else:
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for user in target_users:
        try:
            await context.bot.send_message(
                chat_id=user['user_id'],
                text=notification_text,
                reply_markup=reply_markup,
            )
        except Exception as e:
            #print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            pass

async def search_user(update, context):
    user_id = update.message.from_user.id

    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id –∏–ª–∏ username
    user_input = update.message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, user_id –∏–ª–∏ username)

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id –∏–ª–∏ username
    user = None
    if user_input.isdigit():  # –ï—Å–ª–∏ —ç—Ç–æ user_id (—Ü–∏—Ñ—Ä—ã), –∏—â–µ–º –ø–æ ID
        user = next((u for u in users if u['user_id'] == int(user_input)), None)
    else:  # –ï—Å–ª–∏ —ç—Ç–æ username, –∏—â–µ–º –ø–æ username
        user = next((u for u in users if u['username'] == user_input), None)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    if not user:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—â–∏—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global user_subscriptions
    active_subscription = next(
        (sub for sub in user_subscriptions if sub["user_id"] == user_id), None
    )

    if active_subscription:
        subscription_name = active_subscription["subscription_name"]
        end_date = active_subscription["end_date"]
        time_left = end_date - datetime.now()  # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è

        if time_left.total_seconds() > 0:
            if time_left.days >= 1:
                # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ 1 –¥–Ω—è
                subscription_status = (
                    f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date.strftime('%d.%m.%Y')} ({time_left.days} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)"
                )
            else:
                # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 1 –¥–Ω—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —á–∞—Å—ã
                hours_left = time_left.total_seconds() // 3600
                subscription_status = (
                    f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date.strftime('%d.%m.%Y')} ({int(hours_left)} —á–∞—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å)"
                )
        else:
            subscription_status = "–ò—Å—Ç–µ–∫–ª–∞"
    else:
        subscription_name = "–ù–µ—Ç"
        subscription_status = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"

    # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    books_count = len(user.get('library', []))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    user_info = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"üÜî ID: {user['user_id']}\n"
        f"üìö –°–æ–∑–¥–∞–Ω–æ –∫–Ω–∏–≥: {books_count}\n"
        f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user['username']}\n"
        f"üìú –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_name} ({subscription_status})\n"
    )

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    admin_subscriptions_keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="users_admin")]
    ]
    reply_markup = InlineKeyboardMarkup(admin_subscriptions_keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    context.user_data['current_mode'] = None
    await update.message.reply_text(user_info, reply_markup=reply_markup)

async def process_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_text = update.message.text.strip()
    if not notification_text:
        await update.message.reply_text("‚ö†Ô∏è –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    buttons = []
    if "|" in notification_text:
        lines = notification_text.split("\n")
        text_lines = []
        for line in lines:
            if "|" in line:
                try:
                    button_text, button_link = line.split("|", 1)
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–∏–±–æ –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞, –ª–∏–±–æ –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞)
                    if not (button_link.startswith("http") or button_link.startswith("/")):
                        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ:\n{line}\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'http' –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å '/'")
                        return
                    buttons.append([InlineKeyboardButton(button_text.strip(), url=button_link.strip() if button_link.startswith("http") else None, callback_data=button_link.strip() if not button_link.startswith("http") else None)])
                except ValueError:
                    await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–∫–∏: {line}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–¢–µ–∫—Å—Ç|–°—Å—ã–ª–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /).")
                    return
            else:
                text_lines.append(line)

        # –°–æ–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ
        notification_text = "\n".join(text_lines)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    if not notification_text.strip():
        await update.message.reply_text("‚ö†Ô∏è –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    reply_markup = InlineKeyboardMarkup(buttons) if buttons else None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    target_group = context.user_data.get("target_group", "all")
    await send_notification_to_users(update, context, notification_text, reply_markup, target_group)

    await update.message.reply_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

    # –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞
    context.user_data['current_mode'] = None

async def process_single_user_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in ADMINS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ 'notify_single_user'
    if context.user_data.get('current_mode') != 'notify_single_user':
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_id = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω ID
    if not target_user_id.isdigit():
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        return

    target_user_id = int(target_user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
    target_user = next((u for u in users if u['user_id'] == target_user_id), None)
    
    if not target_user:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    context.user_data['target_user_id'] = target_user_id
    instructions = (
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:\n"
        "`–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏|–°—Å—ã–ª–∫–∞ –∏–ª–∏ /–∫–æ–º–∞–Ω–¥–∞`\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "üéâ –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! üéâ\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ|https://example.com\n"
        "–ú–µ–Ω—é|/menu\n\n"
        "üåü –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –∫—Ä–∞—Å–∏–≤—ã–º –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏! üåàüòä\n"
        "–û–Ω–∏ –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ —è—Ä–∫–∏–º –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω—É–∂–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, —É–∫–∞–∂–∏—Ç–µ –∏—Ö –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º –≤—ã—à–µ.\n\n"
        "üìå –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –º–æ–≥—É—Ç –≤–µ—Å—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.\n\n"
        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥, –≤—ã–±—Ä–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notifications")],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        # –ï—Å–ª–∏ —ç—Ç–æ callback –∑–∞–ø—Ä–æ—Å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(instructions, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(instructions, reply_markup=reply_markup, parse_mode="Markdown")

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    context.user_data['current_mode'] = 'process_single_notification'

async def limit_page_in_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    text = update.message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        context.user_data['current_mode'] = None
        context.user_data['selected_subscription'] = None
        return

    if context.user_data.get('current_mode') != 'limit_page_book':
        return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª-–≤–æ –∫–Ω–∏–≥ –¥–ª—è –ª–∏–º–∏—Ç–∞

    if not text:
        await update.message.reply_text(f"–ß–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        number = int(text)
        
        if number < 5:
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 4")
            return

        global limit_page_book
        limit_page_book = number
        await update.message.reply_text(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å. –∫–æ–ª-–≤–æ —Å—Ç—Ä–Ω. (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏) –∏–∑–º–µ–Ω—ë–Ω–æ –Ω–∞ {limit_page_book}")
        await handle_menu(update, context)
        context.user_data['current_mode'] = None
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 4")

async def process_single_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in ADMINS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ 'process_single_notification'
    if context.user_data.get('current_mode') != 'process_single_notification':
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_text = update.message.text.strip()

    if not notification_text:
        await update.message.reply_text("‚ö†Ô∏è –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    buttons = []
    if "|" in notification_text:
        lines = notification_text.split("\n")
        text_lines = []
        for line in lines:
            if "|" in line:
                try:
                    button_text, button_link = line.split("|", 1)
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–∏–±–æ –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞, –ª–∏–±–æ –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞)
                    if not (button_link.startswith("http") or button_link.startswith("/")):
                        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ:\n{line}\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'http' –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å '/'")
                        return
                    buttons.append([InlineKeyboardButton(button_text.strip(), url=button_link.strip() if button_link.startswith("http") else None, callback_data=button_link.strip() if not button_link.startswith("http") else None)])
                except ValueError:
                    await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–∫–∏: {line}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–¢–µ–∫—Å—Ç|–°—Å—ã–ª–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /).")
                    return
            else:
                text_lines.append(line)

        # –°–æ–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ
        notification_text = "\n".join(text_lines)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    if not notification_text.strip():
        await update.message.reply_text("‚ö†Ô∏è –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    reply_markup = InlineKeyboardMarkup(buttons) if buttons else None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    target_user_id = context.user_data.get('target_user_id')
    target_user = next((u for u in users if u['user_id'] == target_user_id), None)

    if target_user:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(chat_id=target_user_id, text=notification_text, reply_markup=reply_markup)
        await update.message.reply_text(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}!")

    # –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞
    context.user_data['current_mode'] = None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
    current_mode = context.user_data.get('current_mode')

    if current_mode == "search_books":
        await search_books(update, context)

    elif current_mode == "chat_with_ai":
        await chat_with_ai(update, context)

    elif current_mode == "gift_subscription":
        await gift_subscription(update, context)
    
    elif current_mode == "set_subscription_days":
        await set_subscription_days(update, context)

    elif current_mode == "limit_page_book":
        await limit_page_in_book(update, context)

    elif current_mode == "edit_hour_in_chat_with_ai":
        await edit_hour_in_chat_with_ai(update, context)

    elif current_mode == "edit_count_in_chat_with_ai":
        await edit_count_in_chat_with_ai(update, context)
    
    elif current_mode == "process_single_notification":
        await process_single_notification(update, context)
    
    elif current_mode == "notify_single_user":
        await process_single_user_notification(update, context)
    
    elif current_mode == "Limit_books_day":
        await Limit_books_day(update, context)

    elif current_mode == 'add_subscription':
        await add_subscription(update, context)
    
    elif current_mode == 'Limit_books_day_subscribe':
        await Limit_books_day_subscribe(update, context)

    elif current_mode == 'search_user':
        await search_user(update, context)

    elif current_mode == 'process_notification':
        await process_notification(update, context)

    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞.")

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ "–ß–∞—Ç —Å –ò–ò"
async def chat_with_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.message.from_user.id
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'chat_context' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if 'chat_context' not in context.user_data:
        context.user_data['chat_context'] = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.user_data['chat_context'].append({"role": "user", "content": user_message})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(context.user_data['chat_context']) > 10:
        #print('–±–æ–ª—å—à–µ 10 –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞, –æ–±—Ä–µ–∑–∞–µ–º –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö')
        context.user_data['chat_context'] = context.user_data['chat_context'][-10:]

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users if u['user_id'] == user_id), None)

    if not user:####################################################################################################################################
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_subscription = next(
        (sub for sub in user_subscriptions if sub["user_id"] == user_id), None
    )

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤—ã–∫–ª—é—á–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    if subscription_chat_with_ai_is_true:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        if active_subscription is None or active_subscription['end_date'] <= datetime.now():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ count_words_user
            user_data = next((user for user in count_words_user if user['user_id'] == user_id), None)

            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω
            if user_data:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
                current_time = datetime.now(MOSCOW_TZ)

                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç
                if 'reset_time' in user_data and current_time >= user_data['reset_time']:
                    user_data['count'] = 0
                    del user_data['reset_time']

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                user_data['count'] += 1
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
                user_data = {'user_id': user_id, 'count': 1}
                count_words_user.append(user_data)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç
            if user_data['count'] > count_limit_chat_with_ai:
                current_time = datetime.now(MOSCOW_TZ)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
                if 'reset_time' not in user_data or current_time >= user_data['reset_time']:
                    user_data['reset_time'] = current_time + timedelta(hours=wait_hour)

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                reset_time = user_data['reset_time']
                time_left = reset_time - current_time
                hours_left = time_left.seconds // 3600
                minutes_left = (time_left.seconds % 3600) // 60

                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                await update.message.reply_text(
                    f"‚è≥ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ {count_limit_chat_with_ai} —Å–æ–æ–±—â–µ–Ω–∏–π! üì©\n\n"
                    f"üîí –í–∞—à –ª–∏–º–∏—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω —á–µ—Ä–µ–∑ "
                    f"{hours_left} —á–∞—Å–æ–≤ –∏ {minutes_left} –º–∏–Ω—É—Ç.\n\n"
                    f"üíé –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π? –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–∏–º–∏—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"
                )
                return

    # –ó–∞–ø—Ä–æ—Å –∫ ChatGPT
    response = await openai.ChatCompletion.acreate(
        model="gpt-3.5-turbo",
        messages=context.user_data['chat_context'],
        max_tokens=500
    )

    # –û—Ç–≤–µ—Ç –ò–ò
    ai_reply = response['choices'][0]['message']['content']

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.user_data['chat_context'].append({"role": "assistant", "content": ai_reply})
    
    await update.message.reply_text(ai_reply)

async def generate_pdf_and_send(update, context, full_text, exact_title):
    user_id = update.message.from_user.id
    # –°–æ–∑–¥–∞–Ω–∏–µ PDF
    pdf = FPDF()
    pdf.add_font('Garamond', '', 'Garamond.ttf', uni=True)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ Garamond
    pdf.set_font('Garamond', size=18)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
    pdf.add_page()

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è PDF
    pdf.multi_cell(0, 10, full_text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users if u['user_id'] == user_id), None)
    if not user:
        if context.user_data.get('book_language') == 'russian':
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            await update.message.reply_text("‚ö†Ô∏è Error: user not found. Contact your administrator.")
        return

    if "library" not in user:
        user['library'] = []
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
    unique_title = exact_title
    suffix = 0
    while any(book['title'] == unique_title for book in user['library']):
        suffix += 1
        unique_title = f"{exact_title}_{suffix}"

    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_name = f"{user_id}_{unique_title}.pdf"
    file_path = f"media/{file_name}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
    pdf.output(file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤ –±—É—Ñ–µ—Ä
    pdf_output = io.BytesIO()
    pdf_output.write(pdf.output(dest='S').encode('latin1'))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ –±—É—Ñ–µ—Ä
    pdf_output.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_document(document=pdf_output, filename=f"{unique_title}.pdf")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    user['library'].append({
        "title": unique_title,
        "file_path": file_path,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        "added_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get('book_language') == 'russian':
        await update.message.reply_text(
            f"üìö –ö–Ω–∏–≥–∞ {unique_title} –≥–æ—Ç–æ–≤–∞! üéâ\nüìö –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É! üéâ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìö –ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", callback_data='my_library')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')]
            ])
        )
    else:
        await update.message.reply_text(
            f"üìö Book {unique_title} is ready! üéâ\nüìö The book has been successfully added to your library! üéâ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìö My library", callback_data='my_library')],
                [InlineKeyboardButton("üîô Back to menu", callback_data='menu')]
            ])
        )

async def process_book(update: Update, context: ContextTypes.DEFAULT_TYPE, num_pages: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏."""
    user_id = update.message.from_user.id
    user = next((u for u in users if u['user_id'] == user_id), None)
    user['is_process_book'] = True
    list_parts = context.user_data.get('list_parts')
    exact_title = context.user_data.get('exact_title')

    total_words = num_pages * 140  # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–∞ –æ–¥–Ω—É —á–∞—Å—Ç—å
    words_per_part = total_words / 7
    subparts_per_part_float = words_per_part / 100
    subparts_per_part_base = math.floor(subparts_per_part_float)
    fractional_part = round((subparts_per_part_float - subparts_per_part_base) * 10)

    subparts = [subparts_per_part_base] * 7
    if fractional_part in {2, 4, 6, 8}:
        extra_subparts = fractional_part // 2
        for i in range(extra_subparts):
            subparts[i] += 1

    last_text_in_pdf = []
    
    if context.user_data.get('book_language') == 'russian':
        progress_message = await update.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    else:
        progress_message = await update.message.reply_text("Let's start processing...")

    for index, part_number in enumerate(list_parts, start=1):
        for subpart_index in range(1, subparts[index - 1] + 1):
            if context.user_data.get('book_language') == 'russian':
                prompt = (
                    f"–ö–Ω–∏–≥–∞ '{exact_title}' —Å–æ–¥–µ—Ä–∂–∏—Ç {num_pages} —Å—Ç—Ä–∞–Ω–∏—Ü."
                    f"–ú—ã —Å–µ–π—á–∞—Å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —á–∞—Å—Ç—å {part_number}, –ø–æ–¥—á–∞—Å—Ç—å {subpart_index}/{subparts[index - 1]}."
                    f"–í —ç—Ç–æ–π –ø–æ–¥—á–∞—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 190 —Å–ª–æ–≤."
                    "–£—á–∏—Ç—ã–≤–∞—è —ç—Ç–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –¥–∞–Ω–Ω–æ–π –ø–æ–¥—á–∞—Å—Ç–∏ –∫–Ω–∏–≥–∏. –ò –Ω–µ –ø–∏—à–∏ –ø–æ–¥—á–∞—Å—Ç—å –∏ —á–∞—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ"
                )
            else:
                prompt = (
                    f"Book '{exact_title}' contains {num_pages} pages."
                    f"We are now considering part {part_number}, subpart {subpart_index}/{subparts[index - 1]}."
                    f"This subpart should be 190 words long."
                    "With this in mind, write about the content of this sub-part of the book. And do not write subpart and part in the text"
                )

            response = await openai.ChatCompletion.acreate(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=3000
            )
            chat_gpt_reply = response['choices'][0]['message']['content']
            last_text_in_pdf.append(chat_gpt_reply)

            if progress_message:
                if context.user_data.get('book_language') == 'russian':
                    await progress_message.edit_text(
                        f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç—å {index}/7, –ø–æ–¥—á–∞—Å—Ç—å {subpart_index}/{subparts[index - 1]}"
                    )
                else:
                    await progress_message.edit_text(
                        f"Processing part {index}/7, subpart {subpart_index}/{subparts[index - 1]}"
                    )

    full_text = "\n\n".join(last_text_in_pdf)
    user['daily_book_count'] += 1

    await generate_pdf_and_send(update, context, full_text, exact_title)
    user['is_process_book'] = False
    context.user_data.clear()

async def search_books(update, context):
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users if u['user_id'] == user_id), None)
    if not user:
        if context.user_data.get('book_language') == 'russian':
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            await update.message.reply_text("‚ö†Ô∏è User not found. Contact your administrator.")
        return

    if user['is_process_book'] == True:
        keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if context.user_data.get('book_language') == 'russian':
            await update.message.reply_text(
                "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π.",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è You have already started the process of creating a book. Please wait while the previous one is processed.",
                reply_markup=reply_markup
            )
        return
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_subscription = next(
        (sub for sub in user_subscriptions if sub["user_id"] == user_id), None
    )

    today_date = datetime.now().date()
    if user.get('last_book_date') != today_date:
        user['last_book_date'] = today_date
        user['daily_book_count'] = 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–Ω–∏–≥–∏ –∑–∞ –¥–µ–Ω—å
    daily_book_count = user.get('daily_book_count', 0)
    if subscription_search_book_is_true:
        if active_subscription is None or active_subscription['end_date'] <= datetime.now():
            if daily_book_count >= count_limit_book_day:
                if context.user_data.get('book_language') == 'russian':
                    await update.message.reply_text(
                    f"‚ùå –õ–∏–º–∏—Ç –∫–Ω–∏–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞! üïí\nüìù –õ–∏–±–æ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
                    )
                else:
                    await update.message.reply_text(
                    f"‚ùå The book limit for today has been reached.\nTry tomorrow! üïí\nüìù Or subscribe."
                    )

                await handle_menu(update, context)
                return
        else:
            if daily_book_count >= count_limit_book_in_subscribe_day:
                if context.user_data.get('book_language') == 'russian':
                    await update.message.reply_text(
                    f"‚ùå –õ–∏–º–∏—Ç –∫–Ω–∏–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞! üïí"
                    )
                else:
                    await update.message.reply_text(
                    f"‚ùå The book limit for today has been reached.\nTry tomorrow! üïí"
                    )
                await handle_menu(update, context)
                return
    else:
        if daily_book_count >= count_limit_book_in_subscribe_day:
            if context.user_data.get('book_language') == 'russian':
                await update.message.reply_text(
                f"‚ùå –õ–∏–º–∏—Ç –∫–Ω–∏–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞! üïí"
                )
            else:
                await update.message.reply_text(
                f"‚ùå The book limit for today has been reached.\nTry tomorrow! üïí"
                )
            await handle_menu(update, context)
            return

    book_title = update.message.text
    if context.user_data.get('awaiting_pages'):
        try:
            num_pages = int(book_title)
        except ValueError:
            if context.user_data.get('book_language') == 'russian':
                await update.message.reply_text("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —á–∏—Å–ª–æ–º")
            else:
                await update.message.reply_text("‚úèÔ∏è Please indicate the number of pages as a number")
            return

        if subscription_search_book_is_true:
            if active_subscription is None or active_subscription['end_date'] <= datetime.now():
                if num_pages < 5 or num_pages > limit_page_book:
                    if context.user_data.get('book_language') == 'russian':
                        await update.message.reply_text(f"‚úèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 –¥–æ {limit_page_book}")
                    else:
                        await update.message.reply_text(f"‚úèÔ∏è The number of pages should be from 5 to {limit_page_book}")
                    return
            else:
                if num_pages < 5 or num_pages > 50:
                    if context.user_data.get('book_language') == 'russian':
                        await update.message.reply_text("‚úèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 –¥–æ 50")
                    else:
                        await update.message.reply_text("‚úèÔ∏è The number of pages should be from 5 to 50")
                    return
        else:
            if num_pages < 5 or num_pages > 50:
                if context.user_data.get('book_language') == 'russian':
                    await update.message.reply_text("‚úèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 –¥–æ 50")
                else:
                    await update.message.reply_text("‚úèÔ∏è The number of pages should be from 5 to 50")
                return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–∏–≥–∏ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(process_book(update, context, num_pages))
        if context.user_data.get('book_language') == 'russian':
            await update.message.reply_text(
                "üìö –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏ –Ω–∞—á–∞–ª–∞—Å—å. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∫–∞ –∫–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è!"
            )
        else:
            await update.message.reply_text(
                "üìö Processing of the book has begun. You can continue to use the bot while the book is being created!"
            )
        return

    context.user_data['book_title'] = book_title
    exact_title, book_exists, list_parts = await get_chatgpt_response(update, book_title)

    if book_exists == "–¥–∞":
        context.user_data['exact_title'] = exact_title
        context.user_data['list_parts'] = list_parts
        if subscription_search_book_is_true:
            if active_subscription is None or active_subscription['end_date'] <= datetime.now():
                if context.user_data.get('book_language') == 'russian':
                    await update.message.reply_text(
                        f"üìö –ö–Ω–∏–≥–∞ {exact_title} –Ω–∞–π–¥–µ–Ω–∞! üéâ\n"
                        f"üìñ –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —ç—Ç–æ–π –∫–Ω–∏–≥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ? (–æ—Ç 5 –¥–æ {limit_page_book})",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚ùå –≠—Ç–æ –Ω–µ —Ç–∞ –∫–Ω–∏–≥–∞", callback_data='menu')
                        ]])
                        )
                else:
                    await update.message.reply_text(
                        f"üìö Book {exact_title} found! üéâ\n"
                        f"üìñ How many pages in this book do you want? (from 5 to {limit_page_book})",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚ùå This is the wrong book", callback_data='menu')
                        ]])
                    )
                context.user_data['awaiting_pages'] = True
            else:
                if context.user_data.get('book_language') == 'russian':
                    await update.message.reply_text(
                        f"üìö –ö–Ω–∏–≥–∞ {exact_title} –Ω–∞–π–¥–µ–Ω–∞! üéâ\n"
                        f"üìñ –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —ç—Ç–æ–π –∫–Ω–∏–≥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ? (–æ—Ç 5 –¥–æ 50)",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚ùå –≠—Ç–æ –Ω–µ —Ç–∞ –∫–Ω–∏–≥–∞", callback_data='menu')
                        ]])
                        )
                else:
                    await update.message.reply_text(
                        f"üìö Book {exact_title} found! üéâ\n"
                        f"üìñ How many pages in this book do you want? (from 5 to 50)",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚ùå This is the wrong book", callback_data='menu')
                        ]])
                    )
                context.user_data['awaiting_pages'] = True
        else:
            if context.user_data.get('book_language') == 'russian':
                await update.message.reply_text(
                    f"üìö –ö–Ω–∏–≥–∞ {exact_title} –Ω–∞–π–¥–µ–Ω–∞! üéâ\n"
                    f"üìñ –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —ç—Ç–æ–π –∫–Ω–∏–≥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ? (–æ—Ç 5 –¥–æ 50)",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚ùå –≠—Ç–æ –Ω–µ —Ç–∞ –∫–Ω–∏–≥–∞", callback_data='menu')
                    ]])
                    )
            else:
                await update.message.reply_text(
                    f"üìö Book {exact_title} found! üéâ\n"
                    f"üìñ How many pages in this book do you want? (from 5 to 50)",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚ùå This is the wrong book", callback_data='menu')
                    ]])
                )
            context.user_data['awaiting_pages'] = True
    elif book_exists == '–Ω–µ 7':
        if context.user_data.get('book_language') == 'russian':
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')
                ]])
            )
        else:
            await update.message.reply_text(
                f"‚ùå An error has occurred. Try again",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Back to menu", callback_data='menu')
                ]])
            )
    elif book_exists == '–Ω–µ—Ç':
        if context.user_data.get('book_language') == 'russian':
            await update.message.reply_text(
                f"‚ùå –ö–Ω–∏–≥–∞ '{book_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')
                ]])
            )
        else:
            await update.message.reply_text(
                f"‚ùå Book '{book_title}' not found. Try a different name",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Back to menu", callback_data='menu')
                ]])
            )

async def get_chatgpt_response(update: Update, message):
    prompt = (
        f"–†–∞–∑–¥–µ–ª–∏ –∫–Ω–∏–≥—É –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º \"{message}\" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–æ–≤–Ω–æ –Ω–∞ 7 —á–∞—Å—Ç–µ–π."
        "–ï—Å–ª–∏ –∫–Ω–∏–≥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ 7 –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —á–∞—Å—Ç–µ–π, –∏ —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)"
        "–ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞–ø–∏—à–∏, —á—Ç–æ –∫–Ω–∏–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    )
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1000
        )
        answer = response.choices[0].message['content']
        #print('GPT –æ—Ç–≤–µ—Ç:', answer)
        # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        found_title_match = re.search(r'"([^"]+)"', answer)
        exact_title = found_title_match.group(1) if found_title_match else None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–Ω–∏–≥–∏
        if any(phrase in answer.lower() for phrase in ["–Ω–µ—Ç", "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"]):
            book_exists = "–Ω–µ—Ç"
            exact_title = None
            list_parts = None
            return exact_title, book_exists, list_parts
        else:
            book_exists = "–¥–∞"
            found_title_match = re.search(r'"([^"]+)"', answer)
            exact_title = found_title_match.group(1) if found_title_match else None

            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º —Å–ø–∏—Å–∫–∞
            parts = re.split(r'\n\d+\.\s', answer, maxsplit=7)  # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —á–∞—Å—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1. ", "2. " –∏ —Ç.–¥.

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 7 —á–∞—Å—Ç–µ–π
            if len(parts) < 8:  # –ü—Ä–æ–ª–æ–≥ + 7 —á–∞—Å—Ç–µ–π
                print("–û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 7 —á–∞—Å—Ç–µ–π. ---_-_-_-_----___--__--_--__--_____---__--_--__--_-_-_-_---")
                part_1, part_2, part_3, part_4, part_5, part_6, part_7 = [None] * 7
                book_exists = '–Ω–µ 7'
                exact_title = None
                list_parts = None
            else:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø—Ä–æ–ª–æ–≥ (—á–∞—Å—Ç—å –¥–æ "1.")
                part_1, part_2, part_3, part_4, part_5, part_6, part_7 = [part.strip() for part in parts[1:8]]
                list_parts = [part_1, part_2, part_3, part_4, part_5, part_6, part_7]

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –µ—ë —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤—Å–µ —á–∞—Å—Ç–∏
            return exact_title, book_exists, list_parts

    except openai.error.APIConnectionError:
        print("–û—à–∏–±–∫–∞ openai.error.APIConnectionError —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(5)
        return None, "–Ω–µ—Ç", None  # –í–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    except openai.error.Timeout:
        print("–û—à–∏–±–∫–∞ openai.error.Timeout —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(5)
        return await get_chatgpt_response(prompt)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(telegram_bot_token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_menu_selection))
    application.run_polling()

if __name__ == "__main__":
    main()